angular.module("pcModule").service("userService",function($q, $http, $log, $filter){
	var self = this;
	self.registerUser = registerUser;
	self.getUsersList = getUsersList;
	self.updateUserStatus = updateUserStatus;
	self.getQuizResultsByUserId = getQuizResultsByUserId;
	self.getAllRoles = getAllRoles;
	self.updateStatusAndRoleForUsers = updateStatusAndRoleForUsers;
	self.updateUserVisisbility = updateUserVisisbility;
	self.getUserData = getUserData;
	self.updateUser = updateUser;
	self.updateEdcuationDetails = updateEdcuationDetails;
	self.updateProjectDetails =  updateProjectDetails;
	self.updateSkillsetDetails = updateSkillsetDetails;
	self.uploadProfilePic = uploadProfilePic;
	self.updateInterviewDetails = updateInterviewDetails;
	self.sendSMSToUser = sendSMSToUser;
	self.sendMailToUser = sendMailToUser;
	
	function registerUser(obj) {
    	var defer = $q.defer();
    	var config={
    			url:"user/add",
    			method: "POST",
    		    data:obj
    		};
    	$http(config).then(function(res) {
    		defer.resolve(res.data);
    	}, function(error) {
    		defer.reject(error);
    	});
    	return defer.promise;
    }
	function getUsersList(status) {
		var url = "user/getuser?list=true&status="+status;
		status = status || null;
    	var defer = $q.defer();
    	$http.get(url).then(function(res) {
    		if(res.data.isSuccess) {
    			defer.resolve(_transformUsersList(res.data.response));
    		} else {
    			defer.reject(res.data);
    		}
    	}, function(error) {
    		defer.reject(error);
    	});
    	return defer.promise;
    }
	
	function updateUserStatus(obj) {
    	var defer = $q.defer();
    	var config={
    			url:"user/updatestatus",
    			method: "POST",
    			data:obj
    		};
    	$http(config).then(function(res) {
    		defer.resolve(res.data);
    	}, function(error) {
    		defer.reject(error);
    	});
    	return defer.promise;
    }
	function getQuizResultsByUserId(id) {
		var defer = $q.defer();
		var config = {
				url:"user/quizlist?userId="+id,
				method:"GET",
				data:id
		};
		$http(config).then(function(res){
			defer.resolve(res.data);
		}, function(error){
			defer.reject(error);
		});
		return defer.promise;
	}
	
	function getAllRoles() {
		var defer = $q.defer();
		$http.get('user/roles').then(function(res) {
			if(!res.isSucess) {
				defer.resolve(res.data.response);
			} else {
				defer.reject(res.data);
			}
		}, function(error) {
			defer.reject(error);
		});
		return defer.promise;
	}
	
	function updateStatusAndRoleForUsers(userIds, selectedRole, status, interviewDate) {
		var defer = $q.defer();
		if(interviewDate!=null){
			var newDate= interviewDate.getFullYear()+"-"+(interviewDate.getMonth()+1)+"-"+interviewDate.getDate();
		}
		var url = (interviewDate!=null) ? 'user/updatestatusandrole?interviewDate='+newDate : 'user/updatestatusandrole';
		$http.post(url, {
			userIds: userIds,
			selectedRole: selectedRole*1,
			status: status
		}).then(function(res) {
			if(res.data.isSuccess) {
				defer.resolve(res.data.response);
			} else {
				defer.reject(res.data.response);
			}
		}, function(error) {
			defer.reject(error);
		});
		return defer.promise;
	}
	
	
	
	function rejectUsers() {
		
	}
	
	function _transformUsersList(list) {
		var users = {};
		users.pending = $filter('filter')(list, {status: 'PENDING'});
		users.active = $filter('filter')(list, {status: 'ACTIVE'});
		users.all = JSON.parse(JSON.stringify(list));
		return users;
	}
	
	function updateUserVisisbility(isVisible,userId){
		var defer = $q.defer();
		$http.get('user/updateuserisvisible?isVisible='+isVisible+'&userId='+userId).then(function(res){
			if(res.data.isSuccess){
				defer.resolve(res.data.response);
			}else{
				defer.reject(res.data.response);
			}
		},function(error){
			defer.reject(error);
		});
		return defer.promise;
	}
	function getUserData(userId) {
		var defer = $q.defer();
		$http.get('user/completedata?userId=' + userId).then(function(response) {
			var res = response.data;
			if (res.isSuccess) {
				if (res.response.user.address != null) {
					res.response.user.address = JSON.parse(res.response.user.address);
				}
				if (res.response.education != null) {
					res.response.education.educationInfo = JSON.parse(res.response.education.educationInfo);
				}
				if (res.response.skillset != null) {
					res.response.skillset.skills = JSON.parse(res.response.skillset.skills);
				}
				if (res.response.project != null) {
					res.response.project.projectInfo = JSON.parse(res.response.project.projectInfo);
				}
				defer.resolve(res.response);
			} else {
				defer.reject(res);
			}
		}, function(error) {
			defer.reject(error);
		});
		return defer.promise;
	}
	
	function updateUser(req) {
		var defer = $q.defer();
		req.address = JSON.stringify(req.address);
		$http.post('user/updateuser', req).then(function(response) {
			// if falls in 200 category 
			var res = response.data;
			if (res.isSuccess) {
				defer.resolve(res);
			} else {
				// if falls in 200 category but isSuccess fails
				defer.reject(res);
			}
			
		}, function(error) {
			// if falls in 400 and 500 category 
			defer.reject(error);
		});
		return defer.promise;
	}
	
	function updateEdcuationDetails(req){
		var defer = $q.defer();
		var url = (req.id) ? 'user/updateeducation' : 'user/addeducation';
		req.educationInfo = JSON.stringify(req.educationInfo);
		$http.post(url, req).then(function(response) {
			var res = response.data;
			if (res.isSuccess) {
				defer.resolve(res.response);
			} else {
				defer.reject(res);
			}
		}, function(error) {
			defer.reject(error);
		});
		return defer.promise;
	}
	
	function updateProjectDetails(req){
		var defer = $q.defer();
		var url = (req.id) ? 'user/updateproject' : 'user/addproject';
		req.projectInfo = JSON.stringify(req.projectInfo);
		
		$http.post(url, req).then(function(response) {
			var res = response.data;
			if (res.isSuccess) {
				defer.resolve(res.response);
			} else {
				defer.reject(res);
			}
		}, function(error) {
			defer.reject(error);
		});
		return defer.promise;
	}
	
	function updateSkillsetDetails(req){
		var defer = $q.defer();
		var url = (req.id) ? 'user/updateskillset' : 'user/addskillset';
		req.skills = JSON.stringify(req.skills);
		$http.post(url, req).then(function(response) {
			var res = response.data;
			if (res.isSuccess) {
				defer.resolve(res.response);
			} else {
				defer.reject(res);
			}
		}, function(error) {
			defer.reject(error);
		});
		return defer.promise;
	}
	
	function updateInterviewDetails(id,data,ratingValue,reShedule,interviewDate){
		var defer = $q.defer();
		if(interviewDate!=null){
			var newDate= interviewDate.getFullYear()+"-"+(interviewDate.getMonth()+1)+"-"+interviewDate.getDate();
		}
		$http.get('user/updateinterviewstatus?interviewStatus='+data+'&userId='+id+'&ratingValue='+ratingValue+'&reShedule='+reShedule+'&interviewDate='+newDate).then(function(res){
			if(res.data.isSuccess){
				defer.resolve(res.data.response);
			}else{
				defer.reject(res.data.response);
			}
		},function(error){
			defer.reject(error);
		});
		return defer.promise;
	}
	
	function uploadProfilePic(picString, userId) {
		var defer = $q.defer();
		$http.post('user/uploadprofilepic?userId=' + userId, picString).then(function(res) {
			defer.resolve(res);
		}, function(error) {
			defer.reject(error);
		});
		return defer.promise;
	}
	
	function sendSMSToUser(data,mobileNo){
		var defer = $q.defer();
		$http.get('user/sms?smsData='+data+'&mobileNo='+mobileNo).then(function(res) {
			defer.resolve(res);
		}, function(error) {
			defer.reject(error);
		});
		return defer.promise;
	}
	
	function sendMailToUser(emailId){
		var defer = $q.defer();
		$http.get('user/mail?emailId='+emailId).then(function(res) {
			defer.resolve(res);
		}, function(error) {
			defer.reject(error);
		});
		return defer.promise;
	}
	
});